#pragma kernel CSMain

struct MeshProperties {
    float4x4 mat;
    float4 color;
};

RWStructuredBuffer<MeshProperties> _Properties;
float3 _PusherPosition;
float _dis;

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    
    float4x4 mat = _Properties[id.x].mat;
    
    float3 position = float3(mat[0][3], mat[1][3], mat[2][3]);

    float dist = distance(position, _PusherPosition);
    
    dist = _dis - clamp(0.0, _dis, dist);
    /*
    float3 push = normalize(position - _PusherPosition) * dist;

    float4x4 translation = float4x4(
        1, 0, 0, push.x,
        0, 1, 0, push.y,
        0, 0, 1, push.z,
        0, 0, 0, 1
       );
    */
    if (dist > 0)
    {
        _Properties[id.x].mat[0][0] *= 0.9;
        _Properties[id.x].mat[1][1] *= 0.9;
        _Properties[id.x].mat[2][2] *= 0.9;
    }

    // Apply translation to existing matrix, which will be read in the shader.
    //_Properties[id.x].mat = mul(translation, mat);


}
